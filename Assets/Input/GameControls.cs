//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Input/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Controls
{
    public partial class @GameControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""TurnBasedEncounter"",
            ""id"": ""8ab82065-3ee3-40d3-9e48-080ac0b3ecd6"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""1fe5049d-6907-4b32-a14c-83c2e1c595a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9ea7f25d-1eec-48fb-9b6b-93699a8b73bb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SelectActionOne"",
                    ""type"": ""Button"",
                    ""id"": ""5982f819-f1de-42cc-bd42-c6f90a32cb40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectActionTwo"",
                    ""type"": ""Button"",
                    ""id"": ""1a16e281-fdfc-45ab-aed6-9b0dd4894eeb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectActionThree"",
                    ""type"": ""Button"",
                    ""id"": ""7b2e1746-3099-47c1-aa41-4d5a17b21781"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectActionFour"",
                    ""type"": ""Button"",
                    ""id"": ""fbcda4cb-527b-4f9f-b208-182e73502fe3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectActionFive"",
                    ""type"": ""Button"",
                    ""id"": ""87609bb1-4d1f-46fa-aa7f-5f47bbd7b020"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EndTurn"",
                    ""type"": ""Button"",
                    ""id"": ""ff398437-ed17-45c3-a30b-4f42190e8b81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelSelection"",
                    ""type"": ""Button"",
                    ""id"": ""2ce0d297-464c-45bc-a44c-4923abf2be2b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2fa2a869-f2bd-4713-9455-6ed54e046448"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36be579a-68f2-46bb-b11a-ab7b8cc5b084"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a69a09fb-eaf4-4987-a0f4-6ca77a18c239"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e7def8a-efaf-4a54-b677-38dfefcd091c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""SelectActionOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c04cd15-c155-4f39-a993-1d1421639a93"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""SelectActionTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbd225be-a033-48d9-a072-10fd35df27aa"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""SelectActionThree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c4ce82e-c2ae-4676-8e69-e39f88df252a"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""SelectActionFour"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98915bf2-2c21-4adc-84cd-73bc60991a6b"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""SelectActionFive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5efb1f51-736d-46ea-8a1a-b034344d455e"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""EndTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""547469e6-de95-4e6e-95e5-94c6ede1e68f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""CancelSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""272f6d14-89ba-496f-b7ff-215263d3219f"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c95b2375-e6d9-4b88-9c4c-c5e76515df4b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""7607c7b6-cd76-4816-beef-bd0341cfe950"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""15cef263-9014-4fd5-94d9-4e4a6234a6ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""32b35790-4ed0-4e9a-aa41-69ac6d629449"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3c7022bf-7922-4f7c-a998-c437916075ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0489e84a-4833-4c40-bfae-cea84b696689"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""dad70c86-b58c-4b17-88ad-f5e53adf419e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""44b200b1-1557-4083-816c-b22cbdf77ddf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackedDevicePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""24908448-c609-4bc3-a128-ea258674378a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackedDeviceOrientation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9caa3d8a-6b2f-4e8e-8bad-6ede561bd9be"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""ff527021-f211-4c02-933e-5976594c46ed"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""563fbfdd-0f09-408d-aa75-8642c4f08ef0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eb480147-c587-4a33-85ed-eb0ab9942c43"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2bf42165-60bc-42ca-8072-8c13ab40239b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""85d264ad-e0a0-4565-b7ff-1a37edde51ac"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""74214943-c580-44e4-98eb-ad7eebe17902"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cea9b045-a000-445b-95b8-0c171af70a3b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8607c725-d935-4808-84b1-8354e29bab63"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4cda81dc-9edd-4e03-9d7c-a71a14345d0b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9e92bb26-7e3b-4ec4-b06b-3c8f8e498ddc"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82627dcc-3b13-4ba9-841d-e4b746d6553e"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c52c8e0b-8179-41d3-b8a1-d149033bbe86"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1394cbc-336e-44ce-9ea8-6007ed6193f7"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4faf7dc9-b979-4210-aa8c-e808e1ef89f5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KBM"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d66d5ba-88d7-48e6-b1cd-198bbfef7ace"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KBM"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38c99815-14ea-4617-8627-164d27641299"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KBM"",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24066f69-da47-44f3-a07e-0015fb02eb2e"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KBM"",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c191405-5738-4d4b-a523-c6a301dbf754"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";KBM"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ShipBuilder"",
            ""id"": ""0b8d5cbf-fe84-4d13-849e-c9f44d9d0a48"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""3f99730c-22c0-4502-8271-fabf49228a14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1457fdc5-1539-4b31-b3c5-de1050571dab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8119a00c-4112-44bc-bd2d-50ae90c2461f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64c626b3-e22a-4937-965e-6c4c631416b8"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8d48f6f-738b-428f-b549-a0dd49652215"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""d2017e4d-7dcb-42fd-86fd-a192ad73a684"",
            ""actions"": [
                {
                    ""name"": ""ToggleMenu"",
                    ""type"": ""Button"",
                    ""id"": ""c91533ea-97b6-4007-a5fb-f076b9eb761a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""92502de4-7179-46d2-b784-35afeaa54728"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""ToggleMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Overworld"",
            ""id"": ""4249ccce-c8d5-4d90-9f74-2b3965d7c7b2"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""446566f5-e715-46d7-ac45-dcc5f8e83a5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""1bea8166-988f-41a2-9d11-a96f5f620c07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1d131f54-6103-4bfc-829d-9d65943ea6a9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f45f6309-d03d-41fa-a552-dc60bbe19926"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraCursorMovement"",
            ""id"": ""55792168-f9f6-48c5-8dd6-5c9e5b6b96d3"",
            ""actions"": [
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""70fccb9d-5b4e-4dda-9192-8397d86066a8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""d68ec9d8-b635-410b-809a-8ddc659ec135"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""84e990a3-4174-424c-ae19-daf0fac37795"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8f780298-589e-493a-92c7-8a599ca8044c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f97a2e7d-b3ae-4ecf-881d-4133fb507e08"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0687f5b1-c4d0-49e8-988d-f38c6c00a852"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""b056ed58-fbe9-4e68-b581-1e2cc7932cc2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4418d6df-550a-473a-b810-5cb4ec30ee1f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ee000b38-42fc-4459-a636-c6715fa0f72c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7d2419b9-f276-4c34-95dd-bf90b913ca11"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5ddf3887-cda5-429e-ad7b-0ca28119ce16"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PressAnyKey"",
            ""id"": ""973498a2-e06c-459c-8695-a6ccb4244974"",
            ""actions"": [
                {
                    ""name"": ""Any Key"",
                    ""type"": ""Button"",
                    ""id"": ""203cc009-62bc-4a1c-855e-4b069c18200d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""19c89c92-992d-48da-914e-cbac5720c840"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Any Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b54a185-1a92-460c-b277-772b2cf60f09"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Any Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb698f24-e2a3-4eca-bd5d-c432db0e7f7f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Any Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SkillTest"",
            ""id"": ""cc52e8cc-ba41-4c9d-82b2-d9fe7267d135"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""cbe15c03-2bc7-4a2e-9554-bc2338fe9923"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""578d62a8-889a-417e-9876-6bc94c43f70d"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72df4a0b-effe-4611-899d-431830f074e4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d5bb540-86a7-4295-918b-9b72ceb0b056"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ShipPlacement"",
            ""id"": ""c3ecaf5c-6730-4934-b03b-ea570315262d"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""9a3c4838-e91d-4b5f-b476-d927c4d26ffe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0edbdb23-ca31-4386-b62b-06e3a9c495da"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4f0a72fa-641d-47bd-9e5c-d3d5b9ca947f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""744d9829-36c9-462a-98e3-e5388a148e58"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d21a83e-2505-416e-abe1-c8a9e751fd84"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ShipManagement"",
            ""id"": ""4afd4451-552d-4263-af1c-854f6e32272d"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""3a049fcf-e1d7-416e-9e56-c320325da569"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""ccb1fa4e-e881-4997-8f38-d1d6bf5acc04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9cfb08ea-3de4-40e4-a7bc-2c84886e3aa5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OpenCharacterSheet"",
                    ""type"": ""Button"",
                    ""id"": ""7fe9b1fd-5ff5-4436-836b-9b589b832e72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""a962e737-36c9-4c23-ad0f-9f66d7fb1b67"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0bea14b8-b224-4546-a09b-e24e1d236bac"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a99e51e4-8808-4ea9-baa4-12210d02809b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""382c84ca-d238-4db1-917d-0386993ec898"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05eca435-4d33-4baa-b532-0a7670797f6a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""186707de-7e35-4379-a120-2930669a90cd"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""OpenCharacterSheet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cdfc85da-333d-4719-ba08-c9830ec4338c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""CloseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // TurnBasedEncounter
            m_TurnBasedEncounter = asset.FindActionMap("TurnBasedEncounter", throwIfNotFound: true);
            m_TurnBasedEncounter_Click = m_TurnBasedEncounter.FindAction("Click", throwIfNotFound: true);
            m_TurnBasedEncounter_Point = m_TurnBasedEncounter.FindAction("Point", throwIfNotFound: true);
            m_TurnBasedEncounter_SelectActionOne = m_TurnBasedEncounter.FindAction("SelectActionOne", throwIfNotFound: true);
            m_TurnBasedEncounter_SelectActionTwo = m_TurnBasedEncounter.FindAction("SelectActionTwo", throwIfNotFound: true);
            m_TurnBasedEncounter_SelectActionThree = m_TurnBasedEncounter.FindAction("SelectActionThree", throwIfNotFound: true);
            m_TurnBasedEncounter_SelectActionFour = m_TurnBasedEncounter.FindAction("SelectActionFour", throwIfNotFound: true);
            m_TurnBasedEncounter_SelectActionFive = m_TurnBasedEncounter.FindAction("SelectActionFive", throwIfNotFound: true);
            m_TurnBasedEncounter_EndTurn = m_TurnBasedEncounter.FindAction("EndTurn", throwIfNotFound: true);
            m_TurnBasedEncounter_CancelSelection = m_TurnBasedEncounter.FindAction("CancelSelection", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
            m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
            m_UI_Cancel = m_UI.FindAction("Cancel", throwIfNotFound: true);
            m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
            m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
            m_UI_ScrollWheel = m_UI.FindAction("ScrollWheel", throwIfNotFound: true);
            m_UI_MiddleClick = m_UI.FindAction("MiddleClick", throwIfNotFound: true);
            m_UI_RightClick = m_UI.FindAction("RightClick", throwIfNotFound: true);
            m_UI_TrackedDevicePosition = m_UI.FindAction("TrackedDevicePosition", throwIfNotFound: true);
            m_UI_TrackedDeviceOrientation = m_UI.FindAction("TrackedDeviceOrientation", throwIfNotFound: true);
            // ShipBuilder
            m_ShipBuilder = asset.FindActionMap("ShipBuilder", throwIfNotFound: true);
            m_ShipBuilder_Click = m_ShipBuilder.FindAction("Click", throwIfNotFound: true);
            m_ShipBuilder_Point = m_ShipBuilder.FindAction("Point", throwIfNotFound: true);
            // Menu
            m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
            m_Menu_ToggleMenu = m_Menu.FindAction("ToggleMenu", throwIfNotFound: true);
            // Overworld
            m_Overworld = asset.FindActionMap("Overworld", throwIfNotFound: true);
            m_Overworld_Click = m_Overworld.FindAction("Click", throwIfNotFound: true);
            m_Overworld_RightClick = m_Overworld.FindAction("RightClick", throwIfNotFound: true);
            // CameraCursorMovement
            m_CameraCursorMovement = asset.FindActionMap("CameraCursorMovement", throwIfNotFound: true);
            m_CameraCursorMovement_MoveCamera = m_CameraCursorMovement.FindAction("MoveCamera", throwIfNotFound: true);
            // PressAnyKey
            m_PressAnyKey = asset.FindActionMap("PressAnyKey", throwIfNotFound: true);
            m_PressAnyKey_AnyKey = m_PressAnyKey.FindAction("Any Key", throwIfNotFound: true);
            // SkillTest
            m_SkillTest = asset.FindActionMap("SkillTest", throwIfNotFound: true);
            m_SkillTest_Interact = m_SkillTest.FindAction("Interact", throwIfNotFound: true);
            // ShipPlacement
            m_ShipPlacement = asset.FindActionMap("ShipPlacement", throwIfNotFound: true);
            m_ShipPlacement_Click = m_ShipPlacement.FindAction("Click", throwIfNotFound: true);
            m_ShipPlacement_Point = m_ShipPlacement.FindAction("Point", throwIfNotFound: true);
            // ShipManagement
            m_ShipManagement = asset.FindActionMap("ShipManagement", throwIfNotFound: true);
            m_ShipManagement_Click = m_ShipManagement.FindAction("Click", throwIfNotFound: true);
            m_ShipManagement_RightClick = m_ShipManagement.FindAction("RightClick", throwIfNotFound: true);
            m_ShipManagement_Point = m_ShipManagement.FindAction("Point", throwIfNotFound: true);
            m_ShipManagement_OpenCharacterSheet = m_ShipManagement.FindAction("OpenCharacterSheet", throwIfNotFound: true);
            m_ShipManagement_CloseMenu = m_ShipManagement.FindAction("CloseMenu", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // TurnBasedEncounter
        private readonly InputActionMap m_TurnBasedEncounter;
        private List<ITurnBasedEncounterActions> m_TurnBasedEncounterActionsCallbackInterfaces = new List<ITurnBasedEncounterActions>();
        private readonly InputAction m_TurnBasedEncounter_Click;
        private readonly InputAction m_TurnBasedEncounter_Point;
        private readonly InputAction m_TurnBasedEncounter_SelectActionOne;
        private readonly InputAction m_TurnBasedEncounter_SelectActionTwo;
        private readonly InputAction m_TurnBasedEncounter_SelectActionThree;
        private readonly InputAction m_TurnBasedEncounter_SelectActionFour;
        private readonly InputAction m_TurnBasedEncounter_SelectActionFive;
        private readonly InputAction m_TurnBasedEncounter_EndTurn;
        private readonly InputAction m_TurnBasedEncounter_CancelSelection;
        public struct TurnBasedEncounterActions
        {
            private @GameControls m_Wrapper;
            public TurnBasedEncounterActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Click => m_Wrapper.m_TurnBasedEncounter_Click;
            public InputAction @Point => m_Wrapper.m_TurnBasedEncounter_Point;
            public InputAction @SelectActionOne => m_Wrapper.m_TurnBasedEncounter_SelectActionOne;
            public InputAction @SelectActionTwo => m_Wrapper.m_TurnBasedEncounter_SelectActionTwo;
            public InputAction @SelectActionThree => m_Wrapper.m_TurnBasedEncounter_SelectActionThree;
            public InputAction @SelectActionFour => m_Wrapper.m_TurnBasedEncounter_SelectActionFour;
            public InputAction @SelectActionFive => m_Wrapper.m_TurnBasedEncounter_SelectActionFive;
            public InputAction @EndTurn => m_Wrapper.m_TurnBasedEncounter_EndTurn;
            public InputAction @CancelSelection => m_Wrapper.m_TurnBasedEncounter_CancelSelection;
            public InputActionMap Get() { return m_Wrapper.m_TurnBasedEncounter; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TurnBasedEncounterActions set) { return set.Get(); }
            public void AddCallbacks(ITurnBasedEncounterActions instance)
            {
                if (instance == null || m_Wrapper.m_TurnBasedEncounterActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TurnBasedEncounterActionsCallbackInterfaces.Add(instance);
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @SelectActionOne.started += instance.OnSelectActionOne;
                @SelectActionOne.performed += instance.OnSelectActionOne;
                @SelectActionOne.canceled += instance.OnSelectActionOne;
                @SelectActionTwo.started += instance.OnSelectActionTwo;
                @SelectActionTwo.performed += instance.OnSelectActionTwo;
                @SelectActionTwo.canceled += instance.OnSelectActionTwo;
                @SelectActionThree.started += instance.OnSelectActionThree;
                @SelectActionThree.performed += instance.OnSelectActionThree;
                @SelectActionThree.canceled += instance.OnSelectActionThree;
                @SelectActionFour.started += instance.OnSelectActionFour;
                @SelectActionFour.performed += instance.OnSelectActionFour;
                @SelectActionFour.canceled += instance.OnSelectActionFour;
                @SelectActionFive.started += instance.OnSelectActionFive;
                @SelectActionFive.performed += instance.OnSelectActionFive;
                @SelectActionFive.canceled += instance.OnSelectActionFive;
                @EndTurn.started += instance.OnEndTurn;
                @EndTurn.performed += instance.OnEndTurn;
                @EndTurn.canceled += instance.OnEndTurn;
                @CancelSelection.started += instance.OnCancelSelection;
                @CancelSelection.performed += instance.OnCancelSelection;
                @CancelSelection.canceled += instance.OnCancelSelection;
            }

            private void UnregisterCallbacks(ITurnBasedEncounterActions instance)
            {
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @Point.started -= instance.OnPoint;
                @Point.performed -= instance.OnPoint;
                @Point.canceled -= instance.OnPoint;
                @SelectActionOne.started -= instance.OnSelectActionOne;
                @SelectActionOne.performed -= instance.OnSelectActionOne;
                @SelectActionOne.canceled -= instance.OnSelectActionOne;
                @SelectActionTwo.started -= instance.OnSelectActionTwo;
                @SelectActionTwo.performed -= instance.OnSelectActionTwo;
                @SelectActionTwo.canceled -= instance.OnSelectActionTwo;
                @SelectActionThree.started -= instance.OnSelectActionThree;
                @SelectActionThree.performed -= instance.OnSelectActionThree;
                @SelectActionThree.canceled -= instance.OnSelectActionThree;
                @SelectActionFour.started -= instance.OnSelectActionFour;
                @SelectActionFour.performed -= instance.OnSelectActionFour;
                @SelectActionFour.canceled -= instance.OnSelectActionFour;
                @SelectActionFive.started -= instance.OnSelectActionFive;
                @SelectActionFive.performed -= instance.OnSelectActionFive;
                @SelectActionFive.canceled -= instance.OnSelectActionFive;
                @EndTurn.started -= instance.OnEndTurn;
                @EndTurn.performed -= instance.OnEndTurn;
                @EndTurn.canceled -= instance.OnEndTurn;
                @CancelSelection.started -= instance.OnCancelSelection;
                @CancelSelection.performed -= instance.OnCancelSelection;
                @CancelSelection.canceled -= instance.OnCancelSelection;
            }

            public void RemoveCallbacks(ITurnBasedEncounterActions instance)
            {
                if (m_Wrapper.m_TurnBasedEncounterActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITurnBasedEncounterActions instance)
            {
                foreach (var item in m_Wrapper.m_TurnBasedEncounterActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TurnBasedEncounterActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TurnBasedEncounterActions @TurnBasedEncounter => new TurnBasedEncounterActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
        private readonly InputAction m_UI_Navigate;
        private readonly InputAction m_UI_Submit;
        private readonly InputAction m_UI_Cancel;
        private readonly InputAction m_UI_Point;
        private readonly InputAction m_UI_Click;
        private readonly InputAction m_UI_ScrollWheel;
        private readonly InputAction m_UI_MiddleClick;
        private readonly InputAction m_UI_RightClick;
        private readonly InputAction m_UI_TrackedDevicePosition;
        private readonly InputAction m_UI_TrackedDeviceOrientation;
        public struct UIActions
        {
            private @GameControls m_Wrapper;
            public UIActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
            public InputAction @Submit => m_Wrapper.m_UI_Submit;
            public InputAction @Cancel => m_Wrapper.m_UI_Cancel;
            public InputAction @Point => m_Wrapper.m_UI_Point;
            public InputAction @Click => m_Wrapper.m_UI_Click;
            public InputAction @ScrollWheel => m_Wrapper.m_UI_ScrollWheel;
            public InputAction @MiddleClick => m_Wrapper.m_UI_MiddleClick;
            public InputAction @RightClick => m_Wrapper.m_UI_RightClick;
            public InputAction @TrackedDevicePosition => m_Wrapper.m_UI_TrackedDevicePosition;
            public InputAction @TrackedDeviceOrientation => m_Wrapper.m_UI_TrackedDeviceOrientation;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void AddCallbacks(IUIActions instance)
            {
                if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
                @Navigate.started += instance.OnNavigate;
                @Navigate.performed += instance.OnNavigate;
                @Navigate.canceled += instance.OnNavigate;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @ScrollWheel.started += instance.OnScrollWheel;
                @ScrollWheel.performed += instance.OnScrollWheel;
                @ScrollWheel.canceled += instance.OnScrollWheel;
                @MiddleClick.started += instance.OnMiddleClick;
                @MiddleClick.performed += instance.OnMiddleClick;
                @MiddleClick.canceled += instance.OnMiddleClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @TrackedDevicePosition.started += instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.performed += instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.canceled += instance.OnTrackedDevicePosition;
                @TrackedDeviceOrientation.started += instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.performed += instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.canceled += instance.OnTrackedDeviceOrientation;
            }

            private void UnregisterCallbacks(IUIActions instance)
            {
                @Navigate.started -= instance.OnNavigate;
                @Navigate.performed -= instance.OnNavigate;
                @Navigate.canceled -= instance.OnNavigate;
                @Submit.started -= instance.OnSubmit;
                @Submit.performed -= instance.OnSubmit;
                @Submit.canceled -= instance.OnSubmit;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
                @Point.started -= instance.OnPoint;
                @Point.performed -= instance.OnPoint;
                @Point.canceled -= instance.OnPoint;
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @ScrollWheel.started -= instance.OnScrollWheel;
                @ScrollWheel.performed -= instance.OnScrollWheel;
                @ScrollWheel.canceled -= instance.OnScrollWheel;
                @MiddleClick.started -= instance.OnMiddleClick;
                @MiddleClick.performed -= instance.OnMiddleClick;
                @MiddleClick.canceled -= instance.OnMiddleClick;
                @RightClick.started -= instance.OnRightClick;
                @RightClick.performed -= instance.OnRightClick;
                @RightClick.canceled -= instance.OnRightClick;
                @TrackedDevicePosition.started -= instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.performed -= instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.canceled -= instance.OnTrackedDevicePosition;
                @TrackedDeviceOrientation.started -= instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.performed -= instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.canceled -= instance.OnTrackedDeviceOrientation;
            }

            public void RemoveCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIActions instance)
            {
                foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIActions @UI => new UIActions(this);

        // ShipBuilder
        private readonly InputActionMap m_ShipBuilder;
        private List<IShipBuilderActions> m_ShipBuilderActionsCallbackInterfaces = new List<IShipBuilderActions>();
        private readonly InputAction m_ShipBuilder_Click;
        private readonly InputAction m_ShipBuilder_Point;
        public struct ShipBuilderActions
        {
            private @GameControls m_Wrapper;
            public ShipBuilderActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Click => m_Wrapper.m_ShipBuilder_Click;
            public InputAction @Point => m_Wrapper.m_ShipBuilder_Point;
            public InputActionMap Get() { return m_Wrapper.m_ShipBuilder; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ShipBuilderActions set) { return set.Get(); }
            public void AddCallbacks(IShipBuilderActions instance)
            {
                if (instance == null || m_Wrapper.m_ShipBuilderActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ShipBuilderActionsCallbackInterfaces.Add(instance);
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
            }

            private void UnregisterCallbacks(IShipBuilderActions instance)
            {
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @Point.started -= instance.OnPoint;
                @Point.performed -= instance.OnPoint;
                @Point.canceled -= instance.OnPoint;
            }

            public void RemoveCallbacks(IShipBuilderActions instance)
            {
                if (m_Wrapper.m_ShipBuilderActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IShipBuilderActions instance)
            {
                foreach (var item in m_Wrapper.m_ShipBuilderActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ShipBuilderActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ShipBuilderActions @ShipBuilder => new ShipBuilderActions(this);

        // Menu
        private readonly InputActionMap m_Menu;
        private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
        private readonly InputAction m_Menu_ToggleMenu;
        public struct MenuActions
        {
            private @GameControls m_Wrapper;
            public MenuActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @ToggleMenu => m_Wrapper.m_Menu_ToggleMenu;
            public InputActionMap Get() { return m_Wrapper.m_Menu; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
            public void AddCallbacks(IMenuActions instance)
            {
                if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
                @ToggleMenu.started += instance.OnToggleMenu;
                @ToggleMenu.performed += instance.OnToggleMenu;
                @ToggleMenu.canceled += instance.OnToggleMenu;
            }

            private void UnregisterCallbacks(IMenuActions instance)
            {
                @ToggleMenu.started -= instance.OnToggleMenu;
                @ToggleMenu.performed -= instance.OnToggleMenu;
                @ToggleMenu.canceled -= instance.OnToggleMenu;
            }

            public void RemoveCallbacks(IMenuActions instance)
            {
                if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMenuActions instance)
            {
                foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MenuActions @Menu => new MenuActions(this);

        // Overworld
        private readonly InputActionMap m_Overworld;
        private List<IOverworldActions> m_OverworldActionsCallbackInterfaces = new List<IOverworldActions>();
        private readonly InputAction m_Overworld_Click;
        private readonly InputAction m_Overworld_RightClick;
        public struct OverworldActions
        {
            private @GameControls m_Wrapper;
            public OverworldActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Click => m_Wrapper.m_Overworld_Click;
            public InputAction @RightClick => m_Wrapper.m_Overworld_RightClick;
            public InputActionMap Get() { return m_Wrapper.m_Overworld; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(OverworldActions set) { return set.Get(); }
            public void AddCallbacks(IOverworldActions instance)
            {
                if (instance == null || m_Wrapper.m_OverworldActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_OverworldActionsCallbackInterfaces.Add(instance);
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
            }

            private void UnregisterCallbacks(IOverworldActions instance)
            {
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @RightClick.started -= instance.OnRightClick;
                @RightClick.performed -= instance.OnRightClick;
                @RightClick.canceled -= instance.OnRightClick;
            }

            public void RemoveCallbacks(IOverworldActions instance)
            {
                if (m_Wrapper.m_OverworldActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IOverworldActions instance)
            {
                foreach (var item in m_Wrapper.m_OverworldActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_OverworldActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public OverworldActions @Overworld => new OverworldActions(this);

        // CameraCursorMovement
        private readonly InputActionMap m_CameraCursorMovement;
        private List<ICameraCursorMovementActions> m_CameraCursorMovementActionsCallbackInterfaces = new List<ICameraCursorMovementActions>();
        private readonly InputAction m_CameraCursorMovement_MoveCamera;
        public struct CameraCursorMovementActions
        {
            private @GameControls m_Wrapper;
            public CameraCursorMovementActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveCamera => m_Wrapper.m_CameraCursorMovement_MoveCamera;
            public InputActionMap Get() { return m_Wrapper.m_CameraCursorMovement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraCursorMovementActions set) { return set.Get(); }
            public void AddCallbacks(ICameraCursorMovementActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraCursorMovementActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraCursorMovementActionsCallbackInterfaces.Add(instance);
                @MoveCamera.started += instance.OnMoveCamera;
                @MoveCamera.performed += instance.OnMoveCamera;
                @MoveCamera.canceled += instance.OnMoveCamera;
            }

            private void UnregisterCallbacks(ICameraCursorMovementActions instance)
            {
                @MoveCamera.started -= instance.OnMoveCamera;
                @MoveCamera.performed -= instance.OnMoveCamera;
                @MoveCamera.canceled -= instance.OnMoveCamera;
            }

            public void RemoveCallbacks(ICameraCursorMovementActions instance)
            {
                if (m_Wrapper.m_CameraCursorMovementActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraCursorMovementActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraCursorMovementActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraCursorMovementActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraCursorMovementActions @CameraCursorMovement => new CameraCursorMovementActions(this);

        // PressAnyKey
        private readonly InputActionMap m_PressAnyKey;
        private List<IPressAnyKeyActions> m_PressAnyKeyActionsCallbackInterfaces = new List<IPressAnyKeyActions>();
        private readonly InputAction m_PressAnyKey_AnyKey;
        public struct PressAnyKeyActions
        {
            private @GameControls m_Wrapper;
            public PressAnyKeyActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @AnyKey => m_Wrapper.m_PressAnyKey_AnyKey;
            public InputActionMap Get() { return m_Wrapper.m_PressAnyKey; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PressAnyKeyActions set) { return set.Get(); }
            public void AddCallbacks(IPressAnyKeyActions instance)
            {
                if (instance == null || m_Wrapper.m_PressAnyKeyActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PressAnyKeyActionsCallbackInterfaces.Add(instance);
                @AnyKey.started += instance.OnAnyKey;
                @AnyKey.performed += instance.OnAnyKey;
                @AnyKey.canceled += instance.OnAnyKey;
            }

            private void UnregisterCallbacks(IPressAnyKeyActions instance)
            {
                @AnyKey.started -= instance.OnAnyKey;
                @AnyKey.performed -= instance.OnAnyKey;
                @AnyKey.canceled -= instance.OnAnyKey;
            }

            public void RemoveCallbacks(IPressAnyKeyActions instance)
            {
                if (m_Wrapper.m_PressAnyKeyActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPressAnyKeyActions instance)
            {
                foreach (var item in m_Wrapper.m_PressAnyKeyActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PressAnyKeyActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PressAnyKeyActions @PressAnyKey => new PressAnyKeyActions(this);

        // SkillTest
        private readonly InputActionMap m_SkillTest;
        private List<ISkillTestActions> m_SkillTestActionsCallbackInterfaces = new List<ISkillTestActions>();
        private readonly InputAction m_SkillTest_Interact;
        public struct SkillTestActions
        {
            private @GameControls m_Wrapper;
            public SkillTestActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Interact => m_Wrapper.m_SkillTest_Interact;
            public InputActionMap Get() { return m_Wrapper.m_SkillTest; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SkillTestActions set) { return set.Get(); }
            public void AddCallbacks(ISkillTestActions instance)
            {
                if (instance == null || m_Wrapper.m_SkillTestActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SkillTestActionsCallbackInterfaces.Add(instance);
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }

            private void UnregisterCallbacks(ISkillTestActions instance)
            {
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
            }

            public void RemoveCallbacks(ISkillTestActions instance)
            {
                if (m_Wrapper.m_SkillTestActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISkillTestActions instance)
            {
                foreach (var item in m_Wrapper.m_SkillTestActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SkillTestActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SkillTestActions @SkillTest => new SkillTestActions(this);

        // ShipPlacement
        private readonly InputActionMap m_ShipPlacement;
        private List<IShipPlacementActions> m_ShipPlacementActionsCallbackInterfaces = new List<IShipPlacementActions>();
        private readonly InputAction m_ShipPlacement_Click;
        private readonly InputAction m_ShipPlacement_Point;
        public struct ShipPlacementActions
        {
            private @GameControls m_Wrapper;
            public ShipPlacementActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Click => m_Wrapper.m_ShipPlacement_Click;
            public InputAction @Point => m_Wrapper.m_ShipPlacement_Point;
            public InputActionMap Get() { return m_Wrapper.m_ShipPlacement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ShipPlacementActions set) { return set.Get(); }
            public void AddCallbacks(IShipPlacementActions instance)
            {
                if (instance == null || m_Wrapper.m_ShipPlacementActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ShipPlacementActionsCallbackInterfaces.Add(instance);
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
            }

            private void UnregisterCallbacks(IShipPlacementActions instance)
            {
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @Point.started -= instance.OnPoint;
                @Point.performed -= instance.OnPoint;
                @Point.canceled -= instance.OnPoint;
            }

            public void RemoveCallbacks(IShipPlacementActions instance)
            {
                if (m_Wrapper.m_ShipPlacementActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IShipPlacementActions instance)
            {
                foreach (var item in m_Wrapper.m_ShipPlacementActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ShipPlacementActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ShipPlacementActions @ShipPlacement => new ShipPlacementActions(this);

        // ShipManagement
        private readonly InputActionMap m_ShipManagement;
        private List<IShipManagementActions> m_ShipManagementActionsCallbackInterfaces = new List<IShipManagementActions>();
        private readonly InputAction m_ShipManagement_Click;
        private readonly InputAction m_ShipManagement_RightClick;
        private readonly InputAction m_ShipManagement_Point;
        private readonly InputAction m_ShipManagement_OpenCharacterSheet;
        private readonly InputAction m_ShipManagement_CloseMenu;
        public struct ShipManagementActions
        {
            private @GameControls m_Wrapper;
            public ShipManagementActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Click => m_Wrapper.m_ShipManagement_Click;
            public InputAction @RightClick => m_Wrapper.m_ShipManagement_RightClick;
            public InputAction @Point => m_Wrapper.m_ShipManagement_Point;
            public InputAction @OpenCharacterSheet => m_Wrapper.m_ShipManagement_OpenCharacterSheet;
            public InputAction @CloseMenu => m_Wrapper.m_ShipManagement_CloseMenu;
            public InputActionMap Get() { return m_Wrapper.m_ShipManagement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ShipManagementActions set) { return set.Get(); }
            public void AddCallbacks(IShipManagementActions instance)
            {
                if (instance == null || m_Wrapper.m_ShipManagementActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ShipManagementActionsCallbackInterfaces.Add(instance);
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @OpenCharacterSheet.started += instance.OnOpenCharacterSheet;
                @OpenCharacterSheet.performed += instance.OnOpenCharacterSheet;
                @OpenCharacterSheet.canceled += instance.OnOpenCharacterSheet;
                @CloseMenu.started += instance.OnCloseMenu;
                @CloseMenu.performed += instance.OnCloseMenu;
                @CloseMenu.canceled += instance.OnCloseMenu;
            }

            private void UnregisterCallbacks(IShipManagementActions instance)
            {
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @RightClick.started -= instance.OnRightClick;
                @RightClick.performed -= instance.OnRightClick;
                @RightClick.canceled -= instance.OnRightClick;
                @Point.started -= instance.OnPoint;
                @Point.performed -= instance.OnPoint;
                @Point.canceled -= instance.OnPoint;
                @OpenCharacterSheet.started -= instance.OnOpenCharacterSheet;
                @OpenCharacterSheet.performed -= instance.OnOpenCharacterSheet;
                @OpenCharacterSheet.canceled -= instance.OnOpenCharacterSheet;
                @CloseMenu.started -= instance.OnCloseMenu;
                @CloseMenu.performed -= instance.OnCloseMenu;
                @CloseMenu.canceled -= instance.OnCloseMenu;
            }

            public void RemoveCallbacks(IShipManagementActions instance)
            {
                if (m_Wrapper.m_ShipManagementActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IShipManagementActions instance)
            {
                foreach (var item in m_Wrapper.m_ShipManagementActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ShipManagementActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ShipManagementActions @ShipManagement => new ShipManagementActions(this);
        private int m_KBMSchemeIndex = -1;
        public InputControlScheme KBMScheme
        {
            get
            {
                if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
                return asset.controlSchemes[m_KBMSchemeIndex];
            }
        }
        public interface ITurnBasedEncounterActions
        {
            void OnClick(InputAction.CallbackContext context);
            void OnPoint(InputAction.CallbackContext context);
            void OnSelectActionOne(InputAction.CallbackContext context);
            void OnSelectActionTwo(InputAction.CallbackContext context);
            void OnSelectActionThree(InputAction.CallbackContext context);
            void OnSelectActionFour(InputAction.CallbackContext context);
            void OnSelectActionFive(InputAction.CallbackContext context);
            void OnEndTurn(InputAction.CallbackContext context);
            void OnCancelSelection(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnNavigate(InputAction.CallbackContext context);
            void OnSubmit(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
            void OnPoint(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
            void OnScrollWheel(InputAction.CallbackContext context);
            void OnMiddleClick(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
            void OnTrackedDevicePosition(InputAction.CallbackContext context);
            void OnTrackedDeviceOrientation(InputAction.CallbackContext context);
        }
        public interface IShipBuilderActions
        {
            void OnClick(InputAction.CallbackContext context);
            void OnPoint(InputAction.CallbackContext context);
        }
        public interface IMenuActions
        {
            void OnToggleMenu(InputAction.CallbackContext context);
        }
        public interface IOverworldActions
        {
            void OnClick(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
        }
        public interface ICameraCursorMovementActions
        {
            void OnMoveCamera(InputAction.CallbackContext context);
        }
        public interface IPressAnyKeyActions
        {
            void OnAnyKey(InputAction.CallbackContext context);
        }
        public interface ISkillTestActions
        {
            void OnInteract(InputAction.CallbackContext context);
        }
        public interface IShipPlacementActions
        {
            void OnClick(InputAction.CallbackContext context);
            void OnPoint(InputAction.CallbackContext context);
        }
        public interface IShipManagementActions
        {
            void OnClick(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
            void OnPoint(InputAction.CallbackContext context);
            void OnOpenCharacterSheet(InputAction.CallbackContext context);
            void OnCloseMenu(InputAction.CallbackContext context);
        }
    }
}
